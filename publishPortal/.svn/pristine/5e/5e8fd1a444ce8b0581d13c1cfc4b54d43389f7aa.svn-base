package cn.com.shukaiken.controller.menu;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.com.shukaiken.controller.base.RequestContext;
import cn.com.shukaiken.model.Menu;
import cn.com.shukaiken.service.IMenuService;
import cn.com.shukaiken.util.Constant;
import cn.com.shukaiken.util.TokenHandler;

import com.github.pagehelper.PageInfo;
/**
 * 
 * @author jiexuan.zhu
 * @date   2015-11-08
 *
 */
@Controller
@RequestMapping(value="admin/menu")
public class MenuController {
	

	private Logger logger = LoggerFactory.getLogger(MenuController.class);
	
	private static final String MENU_PATH = "/admin/menu/";//菜单权限页面的路径
	
	@Resource
	private IMenuService menuService;
	
	/**
	 * 查询菜单权限列表
	 * @param rc
	 * @param menu
	 * @param model
	 * @return
	 */
	@RequestMapping("/getMenuLs")
	public String getMenuLs(RequestContext rc,Menu menu,ModelMap model){
		if(menu==null){
			menu = new Menu();
		}else{
			if(menu.getMenu_name()!=null){
				if(menu.getMenu_name().equals("")){
					menu.setMenu_name(null);
				}
			}
			
			if(menu.getpName()!=null){
				if(menu.getpName().equals("")){
					menu.setpName(null);
				}
			}
		}
		logger.info("查询菜单权限");
		rc.attr("menu", menu);
		rc.initPageHelper(Constant.PAGE_SIZE_TEN);
		List<Menu> menuList = menuService.getMenuLs(menu);
		PageInfo<Menu> page = new PageInfo<Menu>(menuList);
		model.addAttribute("page", page);
		return MENU_PATH+"menu_list";
	}
	
	/**
	 * 创建权限
	 * @param rc
	 * @return
	 */
	@RequestMapping("/toAddMenu")
	public String toAddMenu(RequestContext rc){
		String token = TokenHandler.generateGUID(rc.getSession());
		rc.attr("TOKEN", token);
		rc.attr("type",1);
		return MENU_PATH+"menu_form";
	}
	
	
	/**
	 * 修改权限
	 * @param rc
	 * @return
	 */
	@RequestMapping("/toUpdateMenu")
	public String toUpdateMenu(RequestContext rc){
		String id = rc.get("id");
		Menu menu = null;
		if(!id.equals("") && id != null){
			menu = menuService.selectByPrimaryKey(Integer.parseInt(id));
		}
		if(menu.getP_id()!=0){
			Menu menuTemp =  menuService.selectByPrimaryKey(menu.getP_id());
			menu.setpName(menuTemp.getMenu_name());
		}
		String token = TokenHandler.generateGUID(rc.getSession());
		rc.attr("TOKEN", token);
		rc.attr("type",2);
		rc.attr("menu",menu);
		return MENU_PATH+"menu_form";
	}
	
	
	/**
	 * 添加或修改
	 * @param rc
	 * @param power
	 * @return
	 */
	@RequestMapping("/addOrUpdateMenu")
	public String addOrUpdateMenu(HttpServletRequest request,RequestContext rc,Menu menu){
		
		if(!TokenHandler.validToken(request)){
			request.setAttribute("msg", "菜单不能重复提交！");
			return MENU_PATH+"menu_form";
		}else{
			String type = rc.get("type");
			String id = rc.get("id");
			
			if(type.equals("1")){
				Menu menuTemp = null;
				if(menu!=null && !menu.getMenu_name().equals("")){
					menuTemp = menuService.selectByName(menu.getMenu_name());
					if(menuTemp==null){
						//继续往下走
						menu.setP_id(1);
						menu.setIs_valid(0);
						menu.setCreate_date(new Date());
						
						menuService.insert(menu);
					}else{
						
						//菜单已经存在
						rc.attr("type",1);
						rc.attr("msg", "该菜单已经存在！");
						return MENU_PATH+"menu_form";
					}
				}
				
			}else if(type.equals("2")){
				
				if(!id.equals("") && id != null){
					menu.setId(Integer.parseInt(id));
					menuService.updateByPrimaryKeySelective(menu);
				}
				
			}
		}
		
		return "forward:getMenuLs";
	}
	
	/**
	 * 去创建子菜单
	 * @param rc
	 * @return
	 */
	@RequestMapping(value="/toAddSubMenu")
	public String toAddSubMenu(RequestContext rc){
		
		String pId =rc.get("id");
		if(pId!=null && !pId.equals("")){
			Menu menu =  menuService.selectByPrimaryKey(Integer.parseInt(pId));
			String token = TokenHandler.generateGUID(rc.getSession());
			rc.attr("TOKEN", token);
			rc.attr("menu",menu);
		}
		
		return MENU_PATH+"menu_sub_form";
	}
	
	/**
	 * 添加子菜单
	 * @param rc
	 * @param menu
	 * @return
	 */
	@RequestMapping("/addSubMenu")
	public String addSubMenu(RequestContext rc,Menu menu){
		
		if(!TokenHandler.validToken(rc.getRequest())){
			rc.attr("msg", "菜单不能重复提交！");
			return MENU_PATH+"menu_sub_form";
		}else{
			//父菜单的id
			String pId = rc.get("pId");
			Menu menuTemp = null;
			if(pId!=null && !pId.equals("")){
				menuTemp = menuService.selectByPrimaryKey(Integer.parseInt(pId));
				menu.setP_id(menuTemp.getId());
			}else{
				//菜单已经存在
				rc.attr("msg", "父菜单id不能为空，程序异常！");
				return MENU_PATH+"menu_sub_form";
			}
			
		    if(menu!=null && !menu.getMenu_name().equals("")){
				Menu temp = menuService.selectByName(menu.getMenu_name());
				if(temp==null){
					//继续往下走
					menu.setIs_valid(0);
					menu.setCreate_date(new Date());
					menuService.insert(menu);
				}else{
					//菜单已经存在
					rc.attr("msg", "该菜单已经存在！");
					return MENU_PATH+"menu_sub_form";
				}
			}
		}
		
		return "forward:getMenuLs";
	}
	
	/**
	 * 查看权限详情
	 * @param rc
	 * @return
	 */
	@RequestMapping(value="/viewMenu")
	public String viewMenu(RequestContext rc){
		String id = rc.get("id");
		Menu menu = null;
		if(!id.equals("") && id != null){
			menu = menuService.selectByPrimaryKey(Integer.parseInt(id));
		}
		if(menu.getP_id()!=0){
			Menu menuTemp =  menuService.selectByPrimaryKey(menu.getP_id());
			menu.setpName(menuTemp.getMenu_name());
		}
		rc.attr("menu",menu);
		return MENU_PATH+"menu_detail";
	}
	
	/**
	 * 判断权限是否可以删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/canDelMenu")
	@ResponseBody
	public Map<String, Object> canDelMenu(HttpServletRequest reuqest,HttpServletResponse response){
		String id = reuqest.getParameter("id");
		Map<String, Object> map = new HashMap<String, Object>();
		if(id!=null && !id.equals("")){
			int count = menuService.canDelMenu(id);
			if(count>0){//还在被使用
				map.put("result", 1);
			}else {//没有被使用
				//查询该菜单下子菜单的数量
				count = menuService.getSubCountById(Integer.parseInt(id));
				if(count>0){
					//还有子菜单在使用，不能删除
					map.put("result", 2);
				}else{
					map.put("result", 0);
				}
			}
		}else{
			//id不能为空
			map.put("result", 3);
		}
		
		return map;
	}
	
	/**
	 * 删除菜单
	 * @param request
	 * @return
	 */
	@RequestMapping("/delMenu")
	public String delMenu(RequestContext rc){
		try {
			String id = rc.get("id");
			if(!id.equals("") && id != null){
				Menu menu = new Menu();
				menu.setIs_valid(2);
				menu.setId(Integer.parseInt(id));
				menuService.updateByPrimaryKeySelective(menu);
			}else{
				rc.attr("msg", "程序异常！");
				return MENU_PATH+"menu_list";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "forward:getMenuLs";
	}
	
}
