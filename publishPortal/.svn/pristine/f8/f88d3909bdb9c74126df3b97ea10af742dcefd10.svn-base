package cn.com.shukaiken.webService.impl;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.codehaus.xfire.transport.http.XFireServletController;
import org.springframework.stereotype.Service;

import cn.com.shukaiken.model.Cust;
import cn.com.shukaiken.service.ICustService;
import cn.com.shukaiken.util.ConfigurationUtils;
import cn.com.shukaiken.util.DateTimeUtils;
import cn.com.shukaiken.util.JSONHelper;
import cn.com.shukaiken.util.UploadImageUtil;
import cn.com.shukaiken.webService.IAppCustWebService;
@Service
public class AppCustWebServiceImpl implements IAppCustWebService {
	
	@Resource
	private ICustService custService;
	
	/**
	 * 获取手机验证码
	 */
	@Override
	public String getValidCode(String user_name) {
		Cust cust = new Cust();
		cust.setUser_name(user_name);
		cust = custService.selectByCust(cust);
		Map<String, Object> map = new HashMap<String,Object>();
		if(cust==null){
			map.put("result", "1");
			map.put("message", "可以注册");
			String validCode = "123456";
			//validCode = Md5.getMD5(validCode);
			map.put("data", validCode);
		}else{
			map.put("result", "0");
			map.put("message", "该用户已经存在");
		}
		String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}

	/**
	 * 用户注册
	 */
	@Override
	public String addCust(String user_name) {
		Map<Object,Object> map = new HashMap<Object,Object>();
		Cust cust = new Cust();
		cust.setUser_name(user_name);
	    Cust temp = custService.selectByCust(cust);
		if(temp==null){
			//cust.setPassword(Md5.getMD5("123456"));
			cust.setPassword("123456");
			cust.setCreate_date(new Date());
			cust.setLast_login_date(new Date());
			cust.setLevel(1);
			cust.setLevel_id(1);
			cust.setIs_valid(0);
			int status = 0;
		    status = custService.addCust(cust);
		    cust = custService.selectByCust(cust);
			if(status>0){
				map.put("result", "1");
				map.put("message", "注册成功");
				map.put("data", cust);
			}else{
				map.put("result", "0");
				map.put("message", "注册失败");
			}
		}else{
			map.put("result", "0");
			map.put("message", "该用户已经存在");
		}
		
		String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}
	
	/**
	 * 登录校验
	 */
	@Override
	public String getLoginStatus(String user_name, String password) {
		Map<String, Object> map = new HashMap<String,Object>();
		Cust cust = new Cust();
		cust.setUser_name(user_name);
		cust.setPassword(password);
		cust = custService.selectByCust(cust);
		if(cust!=null){
			map.put("result", "1");
			map.put("message", "登录成功");
			cust.setLast_login_date(new Date());
			custService.updateByCustId(cust);
			map.put("data", cust);
		}else{
			map.put("result", "0");
			map.put("message", "用户名或者密码错误");
		}
		
		String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}
	
	/**
	 * 设置用户昵称
	 */
	@Override
	public String setCustNickName(String custId, String nick_name) {
		Map<String, Object> map = new HashMap<String,Object>();
		Cust cust = new Cust();
		cust.setId(Integer.parseInt(custId));
		cust.setNick_name(nick_name);
		int status = 0;
	    status = custService.updateByCustId(cust);
	    if(status>0){
	    	map.put("result", "1");
			map.put("message", "昵称设置成功");
	    }else{
	    	map.put("result", "1");
			map.put("message", "昵称设置失败");
	    }
		String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}


	/**
	 * 设置用户头像
	 */
	@Override
	public String setCustHeadImg(String jsonStr) {
	
		Map<String,Object> map = new HashMap<String,Object>();
		if(jsonStr!=null&&jsonStr.length()>0){
			map = JSONHelper.getMapByJson(jsonStr);
			String savePath = "";
			HttpServletRequest request = XFireServletController.getRequest();
			String path = request.getScheme()+"://"+request.getServerName()+":"+
					request.getServerPort()+request.getContextPath()+"/";
			String fileName = DateTimeUtils.customDateTime(new Date(), "yyyyMMddHHmmss")+"_head_"+
					(new Random()).nextInt(1000000)+".jpg";
			String custId = map.get("cust_id").toString();
			if(custId!=null&&!custId.equals("")){
				map.put("result", "002");
				map.put("message", "传递的用户id为空");
			    return JSONHelper.getJsonByMap(map);
			}
			
			String osname = System.getProperty("os.name");
			if(osname.toLowerCase().indexOf("linux")>-1){
				savePath = ConfigurationUtils.readValue("linux.info.images.upload.path", "config.properties");
			}else if(osname.toLowerCase().indexOf("windows")>-1){
				savePath = ConfigurationUtils.readValue("windows.info.images.upload.path", "config.properties");
			}
			String imgStr = map.get("data").toString();
			if(imgStr!=null&&imgStr.length()>0){
				byte[] b = UploadImageUtil.decode(imgStr);
				System.out.println("长度为："+b.length);
				String status = UploadImageUtil.fileUpload(b,savePath,fileName);
				if(!status.equals("ok")){
					map.put("result", "004");
					map.put("message", "用户头像上传失败请重新上传");
					return JSONHelper.getJsonByMap(map);
				}
			}else{
				map.put("result", "003");
				map.put("message", "传递的data为空");
				return JSONHelper.getJsonByMap(map);
			}
			
			/*String custId = map.get("cust_id").toString();
			List<String> imgStrLs = null;
			if(jsonStr!=null&&jsonStr.length()>0){
				imgStrLs = JSONHelper.getListByJsonString(map.get("data").toString());
			}
			if(imgStrLs!=null&&imgStrLs.size()>0){
				for(int i=0;i<imgStrLs.size();i++){
					byte[] b = UploadImageUtil.decode(imgStrLs.get(i));
					UploadImageUtil.fileUpload(b,"E:\\Temp","view"+i+".jpg");
				}
			}*/
			
			Cust cust = new Cust();
			cust.setId(Integer.parseInt(custId));
			cust.setHead_img_url(path+fileName);
			int status = 0;
		    status = custService.updateByCustId(cust);
		    if(status>0){
		    	map.put("result", "1");
				map.put("message", "用户头像设置成功");
		    }else{
		    	map.put("result", "005");
				map.put("message", "用户头像上传失败请重新上传");
		    }
		}else{
			map.put("result", "001");
			map.put("message", "传递的数据为空");
		}
		
		return JSONHelper.getJsonByMap(map);
	}
	
	/**
	 * 绑定微信号
	 * @param custId 用户id
	 * @param wei_xin 微信号
	 * @return
	 */
	@Override
	public String boundWei_xin(String custId, String wei_xin) {
		Map<String, Object> map = new HashMap<String,Object>();
		Cust cust = new Cust();
		cust.setId(Integer.parseInt(custId));
		cust.setWei_xin(wei_xin);
		int status = 0;
	    status = custService.updateByCustId(cust);
	    if(status>0){
	    	map.put("result", "1");
			map.put("message", "微信绑定成功");
	    }else{
	    	map.put("result", "0");
			map.put("message", "微信绑定失败");
	    }
		
		String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}

	
	/**
	 * 绑定qq号
	 * @param custId 用户id
	 * @param qq QQ号
	 * @return
	 */
	@Override
	public String boundQQ(String custId, String qq) {
		Map<String, Object> map = new HashMap<String,Object>();
		Cust cust = new Cust();
		cust.setId(Integer.parseInt(custId));
		cust.setQq(qq);
		int status = 0;
	    status = custService.updateByCustId(cust);
	    if(status>0){
	    	map.put("result", "1");
			map.put("message", "QQ绑定成功");
	    }else{
	    	map.put("result", "0");
			map.put("message", "QQ绑定失败");
	    }
		
	    String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}
	
	/**
	 * 绑定微博号
	 * @param custId 用户id
	 * @param sina_wei_bo 新浪微博号
	 * @return
	 */
	@Override
	public String boundSina_wei_bo(String custId, String sina_wei_bo) {
		Map<String, Object> map = new HashMap<String,Object>();
		Cust cust = new Cust();
		cust.setId(Integer.parseInt(custId));
		cust.setSina_wei_bo(sina_wei_bo);
		int status = 0;
	    status = custService.updateByCustId(cust);
	    if(status>0){
	    	map.put("result", "1");
			map.put("message", "微博绑定成功");
	    }else{
	    	map.put("result", "0");
			map.put("message", "微博绑定失败");
	    }
		
	    String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}

	
	/**
	 * 修改密码
	 * @param custId 用户id
	 * @param password 密码   （传过来的已经过加密）
	 * @return
	 */
	@Override
	public String updatePassword(String custId, String password) {
		Map<String, Object> map = new HashMap<String,Object>();
		Cust cust = new Cust();
		cust.setId(Integer.parseInt(custId));
		cust.setPassword(password);
		int status = 0;
	    status = custService.updateByCustId(cust);
	    if(status>0){
	    	map.put("result", "1");
			map.put("message", "密码修改成功");
	    }else{
	    	map.put("result", "0");
			map.put("message", "密码修改失败");
	    }
		
	    String jsonStr = JSONHelper.getJsonByMap(map);
		return jsonStr;
	}
	
}
